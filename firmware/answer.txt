Use this file to write your answer to Stage 2 of the firmware tasks.

CAN
Q1:

CAN protocol is advantageous since it is well-suited to the automotive needs of Redback. This is because it allows
many sensors and controllers across the car to share a single two-write bus. This is beneficial since it
reduces the amount of wiring compared to SPI, which requires a separate line for each device. In the application
for Redback Racing, we want to minimise weight and have an overall clean design, which makes CAN highly practical. CAN's arbitration system
allows that if multiple devices try to send data at once, the highest priority message always gets through first. For example, if both brake
pressure and motor torque are sending data, CAN can resolve conflicts by sending the message with a higher priority first. This is
critical in our application since we need to prioritize safety, and delayed updates could seriously impact driver control.
Now, unlike USB or PCIe, CAN tolerates long cable runs and electrical noise generated by high voltage inverters, motors, and switching electronics within the car. So CAN ensures
that the messages can arrive intact despite the operating conditions. Also, CAN can easily be decoded using DBC files, which means
that other systems like powertrain and DAQ can interpret each other's data without custom parsing.

However, its main disadvantage comes from its limited bandwidth. Classical CAN supports only 1 Mbit/s and up to 8 bytes per frame, while CAN-FD extends this to 64 bytes but is still slower than USB or PCIe.
So, this means that CAN is great for control signals like steering angle, brake pressure, temperatures, but isn't suited to transmitting high-bandwidth data like raw sensor streams or even camera feeds.
Also, since CAN has arbitration, it means that lower-priority messages can be delayed if the bus is busy, which means that the IDs of messages must be carefully designed so that incorrect messages are not sorted to lower priority.
In Redback's case, this is manageable since we want to prioritize safety, but the bulk of the telemetry data could be better handled using other protocols.

Q2:

Redback would choose CAN since it solves the communication problems within the race car. 
The Embedded Systems and Powertrain groups rely on CAN exchange data between ECUs, motor controllers, and sensors with predictable latency and without the overhead of a host-peripheral model like USB.
The DAQ system benefits from CAN since it is standardised and allows consistent logging of features like battery voltage, current, temperature. 
For Autonomous Vehicles, CAN is attractive because critical control commands such as steering, braking, and torque requests can be placed at the highest priority, guaranteeing they win arbitration over less critical messages.

Alternative protocols would not fit as well. SPI is simple but impractical in this context because it cannot scale to dozens of distributed nodes across a car without a messy star topology. 
PCIe offers huge bandwidth but is short-range, point-to-point, and unsuitable for long harness runs in a vehicle. 
USB provides high throughput but requires a central host and is more vulnerable to noise and disconnects in a harsh environment.
CAN, by contrast, is designed for exactly this type of distributed, noisy, real-time control environment.
It gives Redback Racing the balance of reliability, low wiring weight, and prioritisation needed for a competitive and safe race car.

STM32 Chip Selection

A solid contender that satisfies and surpasses the specifications for Redback Racing's DAQ firmware hardware is the STM32F769 family. With the help of its three separate CAN controllers, the team can manage several CAN networks at once, including control buses, sensor buses, and tractive systems.
Along with supporting USB FS and HS, which are helpful for debugging and high-speed data transfer when connected to a laptop in the pits, it also incorporates an Ethernet MAC for off-car data streaming. Its three 12-bit ADCs on the analogue side allow sensor voltages to be directly recorded without the need for external converters.
The device can handle PWM signals, event timing, or synchronisation tasks because it has up to thirteen 16-bit timers, which is more than the twelve needed.
It can easily handle the firmware size required for a DAQ system with intricate decoding and communication logic since it has 2 MB of flash memory.

It exceeds the minimum specification allowing for expansion in the future. Depending on board design and pinout requirements, it can operate from a 1.7 V to 3.6 V supply (usually 3.3 V) and comes in packages like TFBGA-216 (13 × 13 mm) and LQFP-100 (14 × 14 mm).
It is priced around $150. Overall, STM32F769 series is a good fit since it offers three CAN buses along with USB and ethernet for higher throughput of data for telemetry needs.

